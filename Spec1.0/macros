!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!

! this file, ext.F90, has been constructed by macro expansion; see ext.h for source;

!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!

m4_changequote({,})m4_dnl ; can put comments here;
m4_changecom(!)m4_dnl ; can put comments here;
m4_define(INTEGER,integer)m4_dnl ; can put comments here;
m4_define(REAL,real)m4_dnl ; can put comments here;
m4_define(CHARACTER,character)m4_dnl ; can put comments here;
m4_define(GETTIME,MPI_WTIME())m4_dnl ; can put comments here;
m4_define(MPISTART,

!macro expansion of MPISTART

  myid = 0 ; ncpu = 1
  call MPI_INIT( ierr )
  call MPI_COMM_RANK( MPI_COMM_WORLD, myid, ierr )
  call MPI_COMM_SIZE( MPI_COMM_WORLD, ncpu, ierr )

)m4_dnl can put comments here
m4_define(MPIFINALIZE,{

!macro expansion of mpifinalize

   call MPI_FINALIZE(ierr)

})m4_dnl can put comments here
m4_define(LOCALS,{

!macro expansion of locals

  implicit none
  include "mpif.h"
  INTEGER   :: ierr, astat, ios
  REAL      :: cput, cpui, cpuo ! cpu time; cpu initial; cpu old; 31 Jan 13;

})m4_dnl ; can put comments here;
m4_define(RALLOCATE,{

!macro expansion of rallocate

#ifdef DEBUG

   if( allocated($1) ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; $1 already allocated ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop '$1 allocated'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocating $1 ;")') myid

#endif

   allocate( $1$2, stat=astat )

#ifdef DEBUG

   if( astat.ne.0 ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; error allocating $1 ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop 'error allocating $1'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocated  $1 ;")') myid

#endif

   $1$2 = zero

})m4_dnl ; can put comments here;
m4_define(IALLOCATE,{

!macro expansion of iallocate

#ifdef DEBUG

   if( allocated($1) ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; $1 already allocated ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop '$1 allocated'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocating $1 ;")') myid

#endif

   allocate( $1$2, stat=astat )

#ifdef DEBUG

   if( astat.ne.0 ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; error allocating $1 ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop 'error allocating $1'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocated  $1 ;")') myid

#endif

   $1$2 = 0

})m4_dnl ; can put comments here;
m4_define(LALLOCATE,{

!macro expansion of lallocate

#ifdef DEBUG

   if(allocated($1)) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; $1 already allocated ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop '$1 allocated'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocating $1 ;")') myid

#endif

   allocate($1$2,stat=astat)

#ifdef DEBUG

   if( astat.ne.0 ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; error allocating $1 ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop 'error allocating $1'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocated  $1 ;")') myid

#endif

   $1$2 = .false.

})m4_dnl ; can put comments here;
m4_define(ALLOCATE,{

!macro expansion of allocate

#ifdef DEBUG

   if( allocated($1) ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; $1 already allocated ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop '$1 allocated'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocating $1 ;")') myid

#endif

   allocate($1$2,stat=astat)

#ifdef DEBUG

   if( astat.ne.0 ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; error allocating $1 ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop 'error allocating $1'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; allocated  $1 ;")') myid

#endif

})m4_dnl ; can put comments here;
m4_define(DEALLOCATE,{

!macro expansion of deallocate

#ifdef DEBUG

   if( .not.allocated($1) ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; $1 not allocated ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop '$1 allocated'
   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; de-allocating $1 ;")') myid

#endif

   deallocate($1,stat=astat)

#ifdef DEBUG

   if( astat.ne.0 ) then
    cput = MPI_WTIME()
    write(0,'("macros : ",f10.2," : myid=",i3," ; error de-allocating $1 ;")') cput-cpus, myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop 'error allocating $1'

   endif

   if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; de-allocated  $1 ;")') myid

#endif

})m4_dnl ; can put comments here;
m4_define(FATALMESS,

!macro expansion of fatalmess

   if( $2 ) then
     write(0,'("$1 :      fatal : myid=",i3," ; $2 ; $3 ;")') myid
     call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
     stop "$1 : $2 : $3 ;"
    endif

)m4_dnl ; can put comments here;
m4_define(PAUSE,

!macro expansion of pause

   if( ncpu.eq.1 ) then
    write(0,'("$1 :      pause : ")') 
    pause
   endif

)m4_dnl ; can put comments here;
m4_define(LlBCAST,{

!macro expansion of llbcast
 
#ifdef DEBUG 

   if( $2.lt.0 ) then
    write(0,'("       : ",10x," ; myid=",i3,&
	" ; error broadcasting $1 ;")') myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop
   endif

   if( Wmacros ) write(0,'("       : ",10x," ; myid=",i3," ; lvol=",i3,&
	" ; broadcasting $1 ;")') myid, $3+1

#endif

   call MPI_BCAST($1,$2,&
	MPI_LOGICAL,$3,MPI_COMM_WORLD,ierr)

#ifdef DEBUG

   if( Wmacros ) write(0,'("       : ",10x," ; myid=",i3," ; lvol=",i3,&
	" ; broadcasted  $1 ;")') myid, $3+1

#endif

})m4_dnl can put comments here
m4_define(IlBCAST,{

!macro expansion of ilbcast

#ifdef DEBUG   

   if( $2.lt.0 ) then
    write(0,'("       : "10x" ; myid=",i3,&
	" ; error broadcasting $1 ;")')myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop
   endif

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3," ; lvol=",i3,&
	" ; broadcasting $1 ;")') myid, $3+1

#endif
  
   call MPI_BCAST($1,$2,&
	MPI_INTEGER,$3,MPI_COMM_WORLD,ierr)

#ifdef DEBUG

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3," ; lvol=",i3,&
	" ; broadcasted  $1 ;")') myid, $3+1

#endif

})m4_dnl can put comments here
m4_define(RlBCAST,{

!macro expansion of rlbcast
  
#ifdef DEBUG

   if( $2.lt.0 ) then
    write(0,'("       : "10x" ; myid=",i3,&
	" ; error broadcasting $1 ;")')myid
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop
   endif

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3," ; lvol=",i3,&	
	" ; broadcasting $1 ;")') myid, $3+1

#endif
  
   call MPI_BCAST($1,$2,&
	MPI_DOUBLE_PRECISION,$3,MPI_COMM_WORLD,ierr)

#ifdef DEBUG

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3," ; lvol=",i3,&
	" ; broadcasted  $1 ;")') myid, $3+1

#endif

})m4_dnl can put comments here
m4_define(ClBCAST,{

!macro expansion of clbcast
  
#ifdef DEBUG

   if( $2.lt.0 ) then
    write(0,'("       : "10x" ; myid=",i3," ; lvol=",i3,&
	" ; error broadcasting $1 ;")') myid, $3+1
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop
   endif

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3,&
	" ; lvol=",i3," ; broadcasting $1 ;")') myid, $3+1

#endif
  
   call MPI_BCAST($1,$2,&
	MPI_CHARACTER,$3,MPI_COMM_WORLD,ierr)

#ifdef DEBUG

   if( Wmacros ) write(0,'("       : "10x" ; myid=",i3,&
	" ; lvol=",i3," ; broadcasted  $1 ;")') myid, $3+1

#endif

})m4_dnl can put comments here
m4_define(IGATHER,{

!macro expansion of igather

   call MPI_GATHER($1,$2,MPI_INTEGER,$3,$2,MPI_INTEGER,0,MPI_COMM_WORLD,ierr)

})m4_dnl can put comments here
m4_define(RGATHER,{
!macro expansion of rgather

   call MPI_GATHER($1,$2,MPI_DOUBLE_PRECISION,$3,$2,MPI_DOUBLE_PRECISION,0,MPI_COMM_WORLD,ierr)

})m4_dnl can put comments here
m4_define(IALLGATHER,{

!macro expansion of iallgather

   call MPI_ALLGATHER($1,$2,MPI_INTEGER,$3,$2,MPI_INTEGER,MPI_COMM_WORLD,ierr)

})m4_dnl can put comments here
m4_define(RALLGATHER,{

!macro expansion of rallgather

   call MPI_ALLGATHER($1,$2,MPI_DOUBLE_PRECISION,$3,$2,MPI_DOUBLE_PRECISION,MPI_COMM_WORLD,ierr)

})m4_dnl can put comments here
m4_define(CALL,{

!macro expansion of call

   cput = MPI_WTIME()
   T$1 = T$1 + ( cput-cpuo ) 

   call $2$3

  !cpuo = zero
   cpuo = MPI_WTIME()

})m4_dnl ; can put comments here;
m4_define(WCALL,{

!macro expansion of wcall

   cput = MPI_WTIME()
   T$1 = T$1 + ( cput-cpuo ) 

#ifdef DEBUG
   if( W$1 ) then
    cput = MPI_WTIME()
    write(ounit,'("$1 : ",f10.2," : myid=",i3," ; calling $2 ;")') cput-cpus, myid
   endif
#endif

   call $2$3

#ifdef DEBUG
   if( W$1 ) then
    cput = MPI_WTIME()
    write(ounit,'("$1 : ",f10.2," : myid=",i3," ; called  $2 ;")') cput-cpus, myid
   endif
#endif

  !cpuo = zero
   cpuo = MPI_WTIME()

})m4_dnl ; can put comments here;
m4_define(HWRITEIV,{

!macro expansion of hwriteiv

#ifdef DEBUG
  if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; writing $2 ;")') myid
#endif

  rank = 1 ; onedims(1) = $1

  if( $1.le.0 ) then

   write(0,'("hdfint : "10x" : error calling hwriteiv ; $2 : $1.le.0 ;")')

  else

   call h5screate_simple_f( rank, onedims, space_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5screate_simple_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5screate_simple_f;"
   endif

   call h5dcreate_f( file_id, "$2", H5T_NATIVE_INTEGER, space_id, dset_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dcreate_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dcreate_f;"
   endif

   call h5dwrite_f( dset_id, H5T_NATIVE_INTEGER, $3, onedims, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dwrite_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dwrite_f;"
   endif

  endif

})m4_dnl ; can put comments here;
m4_define(HWRITERV,{

!macro expansion of hwriterv

#ifdef DEBUG
  if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; writing $2 ;")') myid
#endif

  rank = 1 ; onedims(1) = $1

  if( $1.le.0 ) then

   write(0,'("hdfint : "10x" : error calling hwriterv ; $2 : $1.le.0 ;")')

  else

   call h5screate_simple_f( rank, onedims, space_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5screate_simple_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5screate_simple_f;"
   endif

   call h5dcreate_f( file_id, "$2", H5T_NATIVE_DOUBLE, space_id, dset_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dcreate_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dcreate_f;"
   endif

   call h5dwrite_f( dset_id, H5T_NATIVE_DOUBLE, $3, onedims, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dwrite_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dwrite_f;"
   endif

  endif

})m4_dnl ; can put comments here;
m4_define(HWRITERA,{

!macro expansion of hwritea

#ifdef DEBUG
  if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; writing $3 ;")') myid
#endif

  rank = 2 ; twodims(1:2) = (/ $1, $2 /)

  if( $1.le.0 .or. $2.le.0 ) then

   write(0,'("hdfint : "10x" : error calling hwritera ; $3 : $1.le.0 .or. $2.le.0 ;")')

  else

   call h5screate_simple_f( rank, twodims, space_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5screate_simple_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5screate_simple_f;"
   endif

   call h5dcreate_f( file_id, "$3", H5T_NATIVE_DOUBLE, space_id, dset_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dcreate_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dcreate_f;"
   endif

   call h5dwrite_f( dset_id, H5T_NATIVE_DOUBLE, $4, twodims, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dwrite_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dwrite_f;"
   endif

  endif

})m4_dnl ; can put comments here;
m4_define(HWRITERC,{

!macro expansion of hwriterc

#ifdef DEBUG
  if( Wmacros ) write(ounit,'("macros : ", 10x ," : myid=",i3," ; writing $4 ;")') myid
#endif

  rank = 3 ; threedims(1:3) = (/ $1, $2, $3 /)

  if( $1.le.0 .or. $2.le.0 .or. $3.le.0 ) then

   write(0,'("hdfint : "10x" : error calling hwriterc ; $4 : $1.le.0 .or. $2.le.0 .or. $3.le.0 ;")')

  else

   call h5screate_simple_f( rank, threedims, space_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5screate_simple_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5screate_simple_f;"
   endif

   call h5dcreate_f( file_id, "$4", H5T_NATIVE_DOUBLE, space_id, dset_id, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dcreate_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dcreate_f;"
   endif

   call h5dwrite_f( dset_id, H5T_NATIVE_DOUBLE, $5, threedims, hdfier )
   if( hdfier.ne.0 ) then
    write(0,'("hdfint : "10x" : error calling h5dwrite_f ;")')
    call MPI_ABORT( MPI_COMM_WORLD, 1, ierr )
    stop "hdfint : error calling h5dwrite_f;"
   endif

  endif

})m4_dnl ; can put comments here;
m4_define(BEGIN,{

!macro expansion of begin

 !cpui = zero
  cpui = MPI_WTIME()
  cpuo = cpui

#ifdef DEBUG

  if( W$1 ) write(ounit,'("$1 : ",f10.2," : myid=",i3," ; start  ;")') cpui-cpus, myid

#endif

})m4_dnl ; can put comments here;
m4_define(RETURN,{

!macro expansion of return

9999 continue

  cput = MPI_WTIME()
  T$1 = T$1 + ( cput-cpuo )

#ifdef DEBUG

  if( W$1 ) write(ounit,'("$1 : ",f10.2," : myid=",i3," ; finish ; time=",f10.2," ;")') cput-cpus, myid, cput-cpui

#endif

  return

})m4_dnl ; can put comments here;
m4_define(SUMTIME,{

!macro expansion of sumtime

#ifdef DEBUG
   if( Wmacros ) write(ounit,'("       : ", 10x ," : calling mpi_reduce : $1 ;")')
#endif

   call MPI_REDUCE(T$1, $1T, 1, MPI_DOUBLE_PRECISION, MPI_SUM, 0, MPI_COMM_WORLD, ierr )

#ifdef DEBUG
   if( Wmacros ) write(ounit,'("       : ", 10x ," : called  mpi_reduce : $1 ;")')
#endif

})m4_dnl ; can put comments here;
m4_define(PRTTIME,{

!macro expansion of prttime

   write(ounit,'("finish : ",f10.2," : time spent in $1 =",f10.2," ;")') cput-cpus, $1T ; Ttotal = Ttotal + $1T

})m4_dnl ; can put comments here;
