"""
SPECNamelist.py: contains the object that reads and writes the SPEC namelist
SPECNamelist extends the f90nml.Namelist object
Requires:
    numpy
    f90nml, install it using "pip install f90nml"
@author: Zhisong Qu (zhisong.qu@anu.edu.au)
"""
import f90nml
from f90nml import Namelist

import numpy as np

class SPECNamelist(Namelist):
    '''The SPEC namelist class
    To get a content within the namelist, use:
        somevariable = spec_nml['whichlist']['whichitem'], e.g. spec_nml['physicslist']['Ntor'] = 4 sets Ntor in physicslist list to 4

    To change (or add) an item on the namelist, use:
        spec_nml['whichlist']['whichitem'] = somevalue

    Please do not change Mpol, Ntor and Nvol directly. To change them, please use
        spec_nml.update_resolution(new_Mpol, new_Ntor)
        spec_nml.insert_volume(ivol, tflux)
        spec_nml.remove_volume(ivol)

    The guess of the interface Fourier harmonics, if exists, can be obtained by
        spec_nml.get_interface_guess(m_number, n_number, ivol, 'Rbc')
    and changed by
        spec_nml.set_interface_guess(m_number, n_number, ivol, 'Rbc')
        spec_nml.remove_interface_guess(m_number, n_number)
    Alternatively, one can directly modify spec_nml.interface_guess

    member functions:
        read, write, run, update_resolution, insert_volume, remove_volume,
        get_interface_guess, set_interface_guess, remove_interface_guess
    '''
    
    def __init__(self, *args, **kwargs):
        '''Initialization
            use one of the following
            1) spec_nml = SPECNamelist(filename), e.g. spec_nml=SPECNamelist("namelist.sp") or spec_nml=SPECNamelist("/path/to/namelist.sp")
            2) spec_nml = SPECNamelist(spec_output_object), where spec_output_object 
        '''

        from py_spec import SPEC

        if isinstance(args[0], str):
            # the first argument is a string, read from this namelist
            # first create the namelist using __init__ of the namelist object

            file_object  = open(args[0], 'r')

            super().__init__(f90nml.read(file_object))

            # now we should mind some variables that are important: we include them in the object itself and need to monitor them
            self._Mpol = self['physicslist']['mpol']
            self._Ntor = self['physicslist']['ntor']
            self._Nvol = self['physicslist']['nvol']
            
            # then read the part that specifies the guess of the interface geometry
            self._read_interface_guess(file_object)

            file_object.close()

            # we don't know the verson of SPEC from its namelist, so leave it as 'unknown
            self._spec_version = 'unknown'

        elif isinstance(args[0], SPEC):
            # the first argumetn is a SPEC object, generate the quantities from the SPEC object
            # first initialize an empty namelist
            super().__init__()
            
            # then generate the namelist from the SPEC object
            self._generate_namelist_from_output(args[0])

            version_str = '{:5.2f}'
            self._spec_version = version_str.format(args[0].version)

        else:
            # the input is of unknown type, abort
            raise ValueError('The first argument should contain either a path to the SPEC namelist, or a SPEC object generated from reading SPEC hdf5 output')

    def read(self, *args, **kwargs):
        raise NotImplementedError("SPECNamelist does not support 'read' directly. Please call the constructor __init__.")

    def write(self, filename, force=False):
        '''Write to a namelist file
        parameters:
            filename -- the filename to write
            force -- force to overwrite or not
        '''

        import os

        if not isinstance(filename, str):
            raise ValueError('The first argument should contain the path of the namelist to write to')

        # check if some important quantities has changed. If yes, prompt an error
        if not self._Mpol == self['physicslist']['mpol']:
            raise RuntimeError('Inconsistent Mpol. If one wishes to change Mpol or Ntor, please call member function update_resolution')
        if not self._Ntor == self['physicslist']['ntor']:
            raise RuntimeError('Inconsistent Ntor. If one wishes to change Mpol or Ntor, please call member function update_resolution')
        if not self._Nvol == self['physicslist']['nvol']:
            raise RuntimeError('Inconsistent Nvol. If one wishes to change Nvol, please call member function update_Nvol')

        if os.path.exists(filename):
            if not force:
                raise Exception(filename + ' already exists! Pleaes set force to True if you would like to force overwrite.')

        file_object = open(filename, 'w')
        from datetime import datetime

        intro_str = "! auto generated by SPECNamelist.py "
        file_object.write(intro_str)

        # write the time for generating the namelist
        file_object.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S "))

        # write the version of SPEC if known
        if not self._spec_version == 'unknown':
            file_object.write('SPEC version ' + self._spec_version)

        # conclude the first line
        file_object.write('\n')

        # write the main content of the namelist
        super().write(file_object)

        # write the interface guess
        self._write_interface_guess(file_object)

    def run(self, spec_command='./xspec', filename='spec.sp', force=False):
        '''Run SPEC on the current namelist and obtain its output
        parameters:
            spec_command -- the command to call SPEC, usually it looks like '/path/to/spec/xspec'
                            or 'mpirun -np (ncpus) /path/to/spec/xspec', with (ncpus) replaced the number of cpus
            filename -- write this namelist to the temporary file 'filename' in current folder
            force -- if file exists, force overwrite or not
        
        Returns:
            result -- after running SPEC, read the output hdf5 with py_spec and return the SPEC object
        '''
        import os
        import subprocess
        import py_spec

        self.write(filename, force=force)
        run_result = subprocess.run(spec_command + ' ' + filename, shell=True)

        if run_result.returncode == 0: # the run is successful
            print('SPEC runs successfully.')
            return py_spec.SPEC(filename + '.h5')
        else:
            print('SPEC runs unsuccessfully, check terminal output.')
            return None

    def update_resolution(self, new_Mpol, new_Ntor):
        '''Change the Fourier resolution of the SPEC namelist
        parameters:
            new_Mpol, new_Ntor -- the new Mpol and Ntor
        '''
        if new_Mpol == self._Mpol and new_Ntor == self._Ntor:
            # nothing needs to be done
            return None
        if new_Mpol < 0 or new_Ntor < 0:
            raise ValueError('Mpol or Ntor >= 0')

        # We will need to update the size of Rbc, etc and their indexing
        changelist = ['Rbc','Rbs','Zbc','Zbs','Vns','Vnc','Bns','Bnc','Rwc','Rws','Zwc','Zws']

        for key in changelist:
            # convert the list into numpy.ndarray
            data = np.array(self['physicslist'][key], dtype=np.float64)
            orgmlen, orgnlen = data.shape
            orgnmin = self['physicslist'].start_index[key.lower()][0]
            orgnmax = orgnmin + orgnlen - 1

            # the new data array with the new shape
            newnlen = new_Ntor * 2 + 1
            newmlen = new_Mpol + 1
            newnmin = -new_Ntor
            newdata = np.zeros([newmlen, newnlen])

            # copy the data over
            for ii in range(newnlen):
                newnid = newnmin + ii

                # if data is provided for this n number
                if newnid >= orgnmin and newnid <= orgnmax:
                    newdata[:min(orgmlen,newmlen), ii] = data[:min(orgmlen,newmlen), newnid - orgnmin]

            self['physicslist'][key] = newdata.tolist()
            self['physicslist'].start_index[key.lower()][0] = -new_Ntor

        # We will need to update the size of Rac, etc and their indexing    
        changelist = ['Rac', 'Ras', 'Zac', 'Zas']

        for key in changelist:
            data = np.array(self['physicslist'][key], dtype=np.float64)

            newnlen = new_Ntor + 1
            orgnlen = len(data)
            newdata = np.zeros([newnlen])

            newdata[:min(orgnlen,newnlen)] = data[:min(orgnlen,newnlen)]
            self['physicslist'][key.lower()] = newdata.tolist()

        # update start index and self
        self._Ntor = new_Ntor
        self._Mpol = new_Mpol
        self['physicslist']['mpol'] = new_Mpol
        self['physicslist']['ntor'] = new_Ntor


    def get_interface_guess(self, m, n, ivol, key='Rbc'):
        '''Get the guess of the interface Fourier harmonic
        parameters:
            m,n -- the m and n number of the guess, must be within the allowed Mpol and Ntor range
                   the n number is the one without multiplying by Nfp
            ivol -- which volume, Python convention, starting from 0
            key -- which item, can be 'Rbc', 'Zbs', 'Rbs', 'Zbc'
        Returns:
            guess -- the initial guess of the interface harmonic used in SPEC
        '''
        if ivol >= self._Nvol or ivol < 0:
            raise ValueError('ivol must be between 0 and Nvol-1')
        if (m,n) not in self.interface_guess.keys():
            raise ValueError('unknown m or n')
        if key not in ['Rbc', 'Rbs', 'Zbc', 'Zbs']:
            raise ValueError("key must be in ['Rbc', 'Rbs', 'Zbc', 'Zbs']")

        return self.interface_guess[(m,n)][key][ivol]

    def set_interface_guess(self, value, m, n, ivol, key='Rbc'):
        '''Set the guess of the interface Fourier harmonic
        parameters:
            value -- the value that one wants to set
            m,n -- the m and n number of the guess, must be within the allowed Mpol and Ntor range
                   the n number is the one without multiplying by Nfp
            ivol -- which volume, Python convention, starting from 0
            key -- which guess, can be 'Rbc', 'Zbs', 'Rbs', 'Zbc'
        '''
        if ivol >= self._Nvol or ivol < 0:
            raise ValueError('ivol must be between 0 and Nvol-1')
        if m > self._Mpol or m < 0:
            raise ValueError('0 <= m <= Mpol')
        if n > self._Ntor or n < -self._Ntor:
            raise ValueError('-Ntor <= n <= Ntor')
        if key not in ['Rbc', 'Rbs', 'Zbc', 'Zbs']:
            raise ValueError("key must be in ['Rbc', 'Rbs', 'Zbc', 'Zbs']")

        if (m,n) not in self.interface_guess.keys():
            # add a new item
            self.interface_guess[(m,n)] = dict()
            self.interface_guess[(m,n)]['Rbc'] = np.zeros([self._Nvol])
            self.interface_guess[(m,n)]['Zbs'] = np.zeros([self._Nvol])
            self.interface_guess[(m,n)]['Rbs'] = np.zeros([self._Nvol])
            self.interface_guess[(m,n)]['Zbc'] = np.zeros([self._Nvol])

        self.interface_guess[(m,n)][key][ivol] = value

    def remove_interface_guess(self, m, n):
        '''Remove the guess of the interface Fourier harmonic with some m,n
        parameters:
            m,n -- the m and n number of the guess, must be within the allowed Mpol and Ntor range
                   the n number is the one without multiplying by Nfp
        '''

        if (m,n) not in self.interface_guess.keys():
            raise ValueError('unknown m or n')
        else:
            del self.interface_guess[(m,n)]

    def _dump_to_namelist(self, spec_hdf5_subgroup, target_namelist):
        '''dump the properties in the SPEC hdf5 group to the namelist
        parameters:
            spec_hdf5_subgroup -- the SPEC property generated from hdf5 group
            target_namelist -- the target namelist object
        '''

        for key in dir(spec_hdf5_subgroup):
            # add to the namelist if it is not starting with '_' (internal python functions)
            if not key.startswith('_') and not key.startswith('inventory'):
                if key in ['Rbc','Rbs','Zbc','Zbs','Vns','Vnc','Bns','Bnc','Rwc','Rws','Zwc','Zws']:
                    # take care of all the boundary inputs
                    data = getattr(spec_hdf5_subgroup, key)
                    # we only need half of the mpol, since the data is -mpol:mpol
                    mdim = data.shape[0]
                    ndim = data.shape[1]
                    mdim = int((mdim - 1)/2)
                    ndim = int((ndim - 1)/2)

                    target_namelist[key] = data[mdim:,:].tolist()
                    target_namelist.start_index[key.lower()] = [-ndim,0]
                    
                elif key in ['LreadGF','Ltiming','LHevalues','LHevectors','LHmatrix']:
                    # take care of all the bool inputs
                    target_namelist[key] = getattr(spec_hdf5_subgroup, key).item() == 1
                else:
                    if isinstance(getattr(spec_hdf5_subgroup, key),np.ndarray):
                        target_namelist[key] = getattr(spec_hdf5_subgroup, key).tolist()
                    else:
                        target_namelist[key] = getattr(spec_hdf5_subgroup, key)

    def _write_interface_guess(self, file_object):
        '''Write the initialization of the interface to filename
        '''
        
        for harmonics, data in self.interface_guess.items():
            # write m,n
            output_str = '{:6d} {:6d} '
            output_str = output_str.format(harmonics[0], harmonics[1])
            file_object.write(output_str)

            # write the data
            for ii in range(self._Nvol):
                output_str = '{:23.15e} {:23.15e} {:23.15e} {:23.15e}'
                output_str = output_str.format(data['Rbc'][ii], data['Zbs'][ii], data['Rbs'][ii], data['Zbc'][ii])
                file_object.write(output_str)

            # end the line
            file_object.write('\n')


    def _read_interface_guess(self, file_object):
        '''Read the initial guess of the interface
        parameters:
            file_object -- the file object, created using open(filename,'r')
        '''

        # we can read all lines into the memory since the namelist file is usually not that big
        file_object.seek(0)
        lines = file_object.readlines()

        # first pass, we go through the file to locate the last '/' symbol, which indicates the end of the namelist
        slash_counter = 0
        for line_counter, line in enumerate(lines):
            if '/' in line:
                slash_counter = line_counter

        self.interface_guess = dict()
        
        # now go back and start from the next line exactly at the location of the last '/'
        for ii in range(slash_counter+1, len(lines)):

            # split the line into objects
            line_split = lines[ii].split()
            
            # ignore empty lines
            if len(line_split) == 0:
                break

            # check if this line meet our expectation
            valid_line = True
            # first, the number of items should be equal or greater than nvol * 4 + 2
            if not len(line_split) == self._Nvol*4 + 2:
                valid_line = False
            else:
                # the first item should be m, check if this is correct    
                m = int(line_split[0])
                if m < 0:
                    valid_line = False
            
            # if something wrong is detected, report a warning message, jump this line
            if not valid_line:
                print('Initial guess of the interface geometry ignored: line ', ii+1)
                break

            # extract the n number
            n = int(line_split[1])

            # now parse the line, put the data in a dictionary
            self.interface_guess[(m,n)]=dict() 
            self.interface_guess[(m,n)]['Rbc'] = [float(line_split[2+lvol*4]) for lvol in range(self._Nvol)]
            self.interface_guess[(m,n)]['Zbs'] = [float(line_split[2+lvol*4+1]) for lvol in range(self._Nvol)]
            self.interface_guess[(m,n)]['Rbs'] = [float(line_split[2+lvol*4+2]) for lvol in range(self._Nvol)]
            self.interface_guess[(m,n)]['Zbc'] = [float(line_split[2+lvol*4+2]) for lvol in range(self._Nvol)]

    def _generate_namelist_from_output(self, spec_hdf5):
        '''initialize the namelist from SPEC output:
        parameter:
            spec_hdf5 -- A SPEC object generated by reading SPEC hdf5 output
        '''

        # create the namelists
        self['physicslist'] = Namelist()
        self['numericlist'] = Namelist()
        self['locallist'] = Namelist()
        self['globallist'] = Namelist()
        self['diagnosticslist'] = Namelist()
        self['screenlist'] = Namelist()

        self._dump_to_namelist(spec_hdf5.input.physics, self['physicslist'])
        self._dump_to_namelist(spec_hdf5.input.numerics, self['numericlist'])
        self._dump_to_namelist(spec_hdf5.input.local, self['locallist'])
        self._dump_to_namelist(spec_hdf5.input.global1, self['globallist'])
        self._dump_to_namelist(spec_hdf5.input.diagnostics, self['diagnosticslist'])

        # we don't dump screenlist since it is not saved in the hdf5
        #self._dump_to_namelist(spec_hdf5.input.screen, self['screenlist'])


         # now we should mind some variables that are important: we include them in the object itself and need to monitor them
        self._Mpol = self['physicslist']['mpol']
        self._Ntor = self['physicslist']['ntor']
        self._Nvol = self['physicslist']['nvol']

        # replace some namelist objects by those from the output
        self['physicslist']['Rac'] = spec_hdf5.output.Rbc[0,:self._Mpol+1].tolist()
        self['physicslist']['Zas'] = spec_hdf5.output.Zbs[0,:self._Mpol+1].tolist()
        self['physicslist']['Ras'] = spec_hdf5.output.Rbs[0,:self._Mpol+1].tolist()
        self['physicslist']['Zac'] = spec_hdf5.output.Zbc[0,:self._Mpol+1].tolist()
        self['physicslist']['mu'] = spec_hdf5.output.mu.tolist()
        self['physicslist']['pflux'] = spec_hdf5.output.pflux.tolist()
        self['physicslist']['helicity'] = spec_hdf5.output.helicity.tolist()
        self['physicslist']['adiabatic'] = spec_hdf5.output.adiabatic.tolist()

        # generate the guess of the interface
        self.interface_guess = dict()
        for ii in range(spec_hdf5.output.mn):
            m = spec_hdf5.output.im[ii]
            n = int(spec_hdf5.output.in1[ii] / spec_hdf5.input.physics.Nfp)
            self.interface_guess[(m,n)] = dict()
            self.interface_guess[(m,n)]['Rbc'] = spec_hdf5.output.Rbc[1:,ii]
            self.interface_guess[(m,n)]['Zbs'] = spec_hdf5.output.Zbs[1:,ii]
            self.interface_guess[(m,n)]['Rbs'] = spec_hdf5.output.Rbs[1:,ii]
            self.interface_guess[(m,n)]['Zbc'] = spec_hdf5.output.Zbc[1:,ii]
